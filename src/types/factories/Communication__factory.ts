/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Communication, CommunicationInterface } from "../Communication";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "emailHash",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "walletAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "EmailAdded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "emailHash",
        type: "string",
      },
      {
        internalType: "address",
        name: "walletAddress",
        type: "address",
      },
    ],
    name: "createLink",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061026e806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063cbf98e1a14610030575b600080fd5b61004361003e36600461010e565b610045565b005b8246146100985760405162461bcd60e51b815260206004820152601760248201527f436861696e20494420646f6573206e6f74206d61746368000000000000000000604482015260640160405180910390fd5b7f3c0ca292edf4598c13a056d7ccad96551eba73177aa7175554a1d4465b6efa7d83838333426040516100cf9594939291906101d9565b60405180910390a1505050565b634e487b7160e01b600052604160045260246000fd5b80356001600160a01b038116811461010957600080fd5b919050565b60008060006060848603121561012357600080fd5b83359250602084013567ffffffffffffffff8082111561014257600080fd5b818601915086601f83011261015657600080fd5b813581811115610168576101686100dc565b604051601f8201601f19908116603f01168101908382118183101715610190576101906100dc565b816040528281528960208487010111156101a957600080fd5b8260208601602083013760006020848301015280965050505050506101d0604085016100f2565b90509250925092565b8581526000602060a08184015286518060a085015260005b8181101561020d5788810183015185820160c0015282016101f1565b8181111561021f57600060c083870101525b50601f01601f1916830160c0019150610245905060408301866001600160a01b03169052565b6001600160a01b0393909316606082015260800152939250505056fea164736f6c6343000809000a";

type CommunicationConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CommunicationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Communication__factory extends ContractFactory {
  constructor(...args: CommunicationConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Communication> {
    return super.deploy(overrides || {}) as Promise<Communication>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Communication {
    return super.attach(address) as Communication;
  }
  override connect(signer: Signer): Communication__factory {
    return super.connect(signer) as Communication__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CommunicationInterface {
    return new utils.Interface(_abi) as CommunicationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Communication {
    return new Contract(address, _abi, signerOrProvider) as Communication;
  }
}
